syntax = "proto3";

package authoritypb;

import "google/api/annotations.proto";

enum ServiceTypeFlag {
    Unknown = 0;
    ServiceProvider = 1;
    IdentityProvider = 2;
}

message Application {
    string name = 1;
    ServiceTypeFlag type_flags = 2;
    string label = 3;
    string description = 4;
    int64 create_at = 5;
}

message Authentication {
    string app_name = 1;
    string nonce = 2;
    string challenge = 3;
}

message AppCredentials {
    string name = 1;
    string access_key = 2;
    string access_secret = 3;
}

message CertificateTemplate {
    repeated string addresses = 1;
    repeated string domains = 2;
    bytes public_key = 3;
    string service_name = 4;
}

message RegisterApplicationRequest {
    Application application = 1;
}
message RegisterApplicationResponse {}

message SignKeyRequest {
    bytes key_bytes = 1;
}
message SignKeyResponse {
    bytes signature = 1;
}

message SignCertificateRequest {
    CertificateTemplate template = 1;
}
message SignCertificateResponse {
    bytes raw_certificate = 1;
}

message ValidateAuthRequest {
    Authentication authentication = 1;
}
message ValidateAuthResponse {
    string nonce = 1;
    bool valid = 2;
}


service AuthorityService {
    rpc RegisterApplication(RegisterApplicationRequest) returns (RegisterApplicationResponse) {
        option(google.api.http) = {
            post: "/api/v1/app/register";
            body: "*";
        };
    };
    rpc SignKey(SignKeyRequest)returns(SignKeyResponse){
        option(google.api.http) = {
            post: "/api/v1/sign/key";
            body:"*";
        };
    };
    rpc SignCertificate(SignCertificateRequest)returns(SignCertificateResponse){
        option(google.api.http) = {
            post: "/api/v1/app/sign/cert";
            body:"*";
        };
    };
    rpc ValidateAuth(ValidateAuthRequest)returns(ValidateAuthResponse){
        option(google.api.http).get = "/api/v1/auth/validate";
    };
}