syntax = "proto3";

package authpb;

import "google/api/annotations.proto";

enum JWTPurpose {
    AUTHENTICATION = 0;
    RESOURCES_ACCESS = 1;
    VALIDATION = 2;
}

enum JWTState {
    VALID = 0;
    NOT_VALID = 1;
    EXPIRED = 2;
    REVOKED = 3;
    NOT_SIGNED = 4;
    NOT_EFFECTIVE = 5;
}

message JWTHeader {
    string typ = 1;
    string alg = 2;
}

message Claims {
    string iss = 1;
    string sub = 2;
    string aud = 3;
    int64 exp = 4;
    int64 nbf = 5;
    int64 iat = 6;
    string jti = 7;
    string version = 8;
    repeated string scope = 9;
    string requester = 10;
    string store = 11;
    string data = 12;
}

message JWT {
    JWTHeader header = 1;
    Claims claims = 2;
    string signature = 3;
}

message Credentials {
    string username = 1;
    string email = 2;
    string password = 3;
}

enum EventAction {
    Delete = 0;
    Save = 1;
}

service JWTStore {
    rpc Feed (stream JwtEvent) returns (stream FeedResponse);
    rpc Listen (ListenRequest) returns (stream JwtEvent);
    rpc FindToken (FindJWTRequest) returns (FindJWTResponse) {
        option(google.api.http).get = "/api/jwt-store/find/{jti}";
    };
}

message JwtInfo {
    string jti = 1;
    int64 nbf = 2;
    int64 exp = 3;
    JWTState state = 4;
}

message JwtEvent {
    EventAction action = 1;
    JwtInfo info = 2;
}
message FeedResponse {
    string error = 1;
    string jti = 2;
}

message FindJWTRequest {
    string jti = 1;
    string signature = 2;
}
message FindJWTResponse {
    string found = 1;
}

message DeleteJWTRequest {
    string jti = 1;
}
message DeleteJWTResponse {
    uint32 count = 1;
}

message ListenRequest {}


service IDMService {
    rpc CreateCredentials (CreateCredentialsRequest) returns (CreateCredentialsResponse) {
        option(google.api.http) = {
            post: "/api/account/create";
            body: "*";
        };
    };
    rpc Authenticate(AuthenticateRequest)returns(GetTokenResponse){
        option(google.api.http) = {
            post: "/api/jwt/get";
            body:"*";
        };
    };
    rpc RevokeToken(RevokeTokenRequest)returns(RevokeTokenResponse){
        option(google.api.http).get = "/api/jwt/revoke";
    };
    rpc SetPassword(SetPasswordRequest)returns(SetPasswordResponse){
        option(google.api.http) = {
            post: "/api/password/update";
            body:"*";
        };
    };
    rpc ValidateEmail(ValidateEmailRequest)returns(ValidateEmailResponse){
        option(google.api.http).get = "/api/email/validate";
    };
    rpc TriggerEmailValidation(TriggerEmailValidationRequest)returns(TriggerEmailValidationResponse){
        option(google.api.http) = {
            post: "/api/email/validation/trigger";
            body:"*";
        };
    };
/*rpc GetAuthorizationCode (GetAuthorizationCodeRequest) returns (GetAuthorizationCodeResponse);
rpc GetOAuthAccessToken (GetOAuthAccessTokenRequest) returns (GetOAuthAccessTokenResponse);
rpc GetResetPasswordEmailToken (GetResetPasswordEmailTokenRequest) returns (GetResetPasswordEmailTokenResponse);*/
}

message CreateCredentialsRequest {
    Credentials credentials = 1;
}
message CreateCredentialsResponse {
    bool user_taken = 1;
    bool email_taken = 2;
}

message AuthenticateRequest {
    string subject = 1;
    string password = 2;
}
message GetTokenResponse {
    JWT jwt = 1;
    uint32 code = 2;
}

message ValidateEmailRequest{
    string info = 1;
}
message ValidateEmailResponse {

}

message TriggerEmailValidationRequest {
    string email = 1;
}
message TriggerEmailValidationResponse {}

message RevokeTokenRequest {
    JWT jwt = 1;
}
message RevokeTokenResponse {
}

message GetResetPasswordEmailTokenRequest {
    string email = 1;
    string callback_url = 2;
}
message GetResetPasswordEmailTokenResponse {
}

message SetPasswordRequest {
    string user = 1;
    string email = 2;
    string old_password = 3;
    string new_password = 4;
}
message SetPasswordResponse {
    bool already_used = 1;
}

message GetAuthorizationCodeRequest {
    string client_id = 1;
    repeated string scope = 2;
    string code_verifier = 3;
    string code_verifier_method = 4;
}
message GetAuthorizationCodeResponse {
    string code_challenge = 1;
}

message GetOAuthAccessTokenRequest {
    string client_id = 1;
    bytes code = 2;
    string state = 3;
    string code_verifier = 4;
    repeated string scope = 5;
}
message GetOAuthAccessTokenResponse {
    JWT jwt = 1;
}