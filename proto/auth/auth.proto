syntax = "proto3";

package authpb;

import "google/api/annotations.proto";

enum TokenPurpose {
    AUTHENTICATION = 0;
    RESOURCES_ACCESS = 1;
    VALIDATION = 2;
}

enum TokenState {
    VALID = 0;
    NOT_VALID = 1;
    EXPIRED = 2;
    REVOKED = 3;
    NOT_SIGNED = 4;
    NOT_EFFECTIVE = 5;
}

message TokenHeader {
    string typ = 1;
    string alg = 2;
}

message Claims {
    string iss = 1;
    string sub = 2;
    string aud = 3;
    int64 exp = 4;
    int64 nbf = 5;
    int64 iat = 6;
    string jti = 7;
    string version = 8; // string version
    repeated string scope = 9; // scope of the token
    string origin = 10; // location the token was requested from
    string data = 11;
}

message Token {
    TokenHeader header = 1;
    Claims claims = 2;
    string signature = 3;
}

message Credentials  {
    string username = 1;
    string email = 2;
    string password = 3;
}

message TokenEvent {
    string jti = 1;
    TokenState state = 2;
}

enum FeedAction {
    Delete = 0;
    Save = 1;
}

service TokenStoreService {
    rpc FeedSession(stream FeedRequest) returns (stream FeedResponse);
    rpc FindToken(FindTokenRequest) returns (FindTokenResponse) {
        option(google.api.http).get = "/api/v1/token/registered/{jti}";
    };
}

message FeedRequest {
    string jti = 1;
    string nbf = 2;
    string exp = 3;
    string signature = 4;
}
message FeedResponse {

}

message FindTokenRequest {
    string jti = 1;
}
message FindTokenResponse {
    string found = 1;
}

message DeleteTokenRequest {
    string jti = 1;
}
message DeleteTokenResponse {
    uint32 count = 1;
}

service IDMService {
    rpc CreateCredentials (CreateCredentialsRequest) returns (CreateCredentialsResponse) {
        option(google.api.http) = {
            post: "/api/v1/account/create";
            body: "*";
        };
    };
    rpc Authenticate (AuthenticateRequest) returns (GetTokenResponse){
        option(google.api.http) = {
            post: "/api/v1/jwt/get";
            body: "*";
        };
    };
    rpc RevokeToken (RevokeTokenRequest) returns (RevokeTokenResponse){
        option(google.api.http).get = "/api/v1/jwt/revoke";
    };
    rpc SetPassword (SetPasswordRequest) returns (SetPasswordResponse) {
        option(google.api.http) = {
            post: "/api/v1/password/update";
            body: "*";
        };
    };
    rpc ValidateEmail(ValidateEmailRequest) returns (ValidateEmailResponse){
        option(google.api.http).get = "/api/v1/email/validate";
    };
    rpc TriggerEmailValidation(TriggerEmailValidationRequest) returns (TriggerEmailValidationResponse) {
        option(google.api.http) = {
            post: "/api/v1/email/validation/trigger";
            body: "*";
        };
    };
    /*rpc GetAuthorizationCode (GetAuthorizationCodeRequest) returns (GetAuthorizationCodeResponse);
    rpc GetOAuthAccessToken (GetOAuthAccessTokenRequest) returns (GetOAuthAccessTokenResponse);
    rpc GetResetPasswordEmailToken (GetResetPasswordEmailTokenRequest) returns (GetResetPasswordEmailTokenResponse);*/
}

message CreateCredentialsRequest {
    Credentials credentials = 1;
}
message CreateCredentialsResponse {
    bool user_taken = 1;
    bool email_taken = 2;
}

message AuthenticateRequest {
    string subject = 1;
    string password = 2;
}
message GetTokenResponse {
    Token token = 1;
    uint32 code = 2;
}

message ValidateEmailRequest{
    string info = 1;
}
message ValidateEmailResponse {

}

message TriggerEmailValidationRequest {
    string email = 1;
}
message TriggerEmailValidationResponse {}

message RevokeTokenRequest {
    Token token = 1;
}
message RevokeTokenResponse {
}

message GetResetPasswordEmailTokenRequest {
    string email = 1;
    string callback_url = 2;
}
message GetResetPasswordEmailTokenResponse {
}

message SetPasswordRequest {
    string user = 1;
    string email = 2;
    string old_password = 3;
    string new_password = 4;
}
message SetPasswordResponse {
    bool already_used = 1;
}

message GetAuthorizationCodeRequest {
    string client_id = 1;
    repeated string scope = 2;
    string code_verifier = 3;
    string code_verifier_method = 4;
}
message GetAuthorizationCodeResponse {
    string code_challenge = 1;
}

message GetOAuthAccessTokenRequest {
    string client_id = 1;
    bytes code = 2;
    string state = 3;
    string code_verifier = 4;
    repeated string scope = 5;
}
message GetOAuthAccessTokenResponse {
    Token token = 1;
}