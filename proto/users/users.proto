syntax = "proto3";

package userspb;

import "google/api/annotations.proto";

enum Capabilities {
    Default = 0;
    CanManageResourcesAccess = 1;
    CanCreateGroup = 2;
}

message User {
    string group_uuid = 1;
    string name = 2;
}

message Group {
    string uuid = 1;
    string full_name = 2;
    string label = 3;
    string description = 4;
    int64 created_at = 5;
    string created_by = 6;
}

message GroupInfo {
    string uuid = 1;
    string full_name = 2;
    string label = 3;
    string description = 4;
    int64 created_at = 5;
    string created_by = 6;
    string parent = 7;
    uint32 user_count = 8;
    uint32 sub_count = 9;
}

service UsersService {
    rpc CreateGroup (CreateGroupRequest) returns (CreateGroupResponse){
        option(google.api.http) =  {
            post: "/api/groups/create";
            body: "*";
        };
    };
    rpc GetGroup (GetGroupRequest) returns (GetGroupResponse) {
        option(google.api.http).get = "/api/group/{group_uuid}";
    };
    rpc StreamSubGroups (StreamSubGroupsRequest) returns (stream Group);
    rpc ListSubGroup (ListSubGroupRequest) returns (ListSubGroupResponse) {
        option(google.api.http).get = "/api/group/{group_uuid}/subgroups";
    };
    rpc DeleteGroup (DeleteGroupRequest) returns (DeleteGroupResponse) {
        option(google.api.http).delete = "/api/group/{group_uuid}/delete";
    };
    rpc AddUser (AddUserRequest) returns (AddUserResponse) {
        option(google.api.http) = {
            post: "/api/group/{user.group_uuid}/user";
            body: "*";
        };
    };
    rpc MoveUser (MoveUserRequest) returns (MoveUserResponse) {
        option(google.api.http) =  {
            post: "/api/group/user/move";
            body: "*";
        };
    };
    rpc GetUserStream (GetUserStreamRequest) returns (stream User);
    rpc ListUsers (ListUsersRequest) returns (ListUsersResponse) {
        option(google.api.http).get = "/api/group/{group_uuid}/users/list";
    };
    rpc DeleteUser (DeleteUserRequest) returns (DeleteUserResponse) {
        option(google.api.http).delete = "/api/group/{user.group_uuid}/users/delete";
    };
    rpc DeleteUserSession (stream User) returns (stream User);
}

message CreateGroupRequest {
    Group group = 1;
}
message CreateGroupResponse {}

message GetGroupRequest {
    string group_uuid = 1;
}
message GetGroupResponse {
    Group group = 1;
}

message StreamSubGroupsRequest {
    string group_uuid = 1;
}

message ListSubGroupRequest {
    string group_uuid = 1;
    uint32 offset = 2;
}
message ListSubGroupResponse {
    repeated Group groups = 1;
    uint32 offset = 2;
    uint32 total = 3;
}

message DeleteGroupRequest {
    string group_uuid = 1;
}
message DeleteGroupResponse {}

message AddUserRequest {
    User user = 1;
    Capabilities capabilities = 2;
}
message AddUserResponse {
}

message MoveUserRequest {
    User user = 1;
    string group_uuid = 2;
}
message MoveUserResponse {}

message GetUserStreamRequest {
    string group_uuid = 1;
}

message ListUsersRequest {
    string group_uuid = 1;
    uint32 offset = 2;
}
message ListUsersResponse {
    repeated User users = 1;
    uint32 offset = 2;
    uint32 total = 3;
}

message DeleteUserRequest {
    User user = 1;
}
message DeleteUserResponse {
}