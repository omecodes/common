syntax = "proto3";

package servicepb;

import "google/api/annotations.proto";

enum Type {
    Unknown = 0;
    Authority = 1;
    IDM = 2;
    UsersHierarchy = 3;
    UserInfo = 4;
    ConfigsStore = 5;
    Storage = 6;
}

enum Security {
    None = 0;
    ServerTLS = 1;
    MutualTLS = 2;
}

enum Status {
    Unknown = 0;
    Running = 1;
    Stopped = 2;
}

message State {
    Status status = 1;
    map<string, string> metadata = 2;
}

message Node {
    string protocol = 1;
    string address = 2;
    Security security = 3;
    int64 ttl = 5;
}

message Info {
    string name = 1;
    string namespace = 2;
    Type type = 3;
    string label = 4;
    repeated Node nodes = 5;
    map<string, string> meta = 6;
}

message RegisterRequest {
    Info service = 1;
}
message RegisterResponse {
    string registry_id = 1;
}

message DeregisterRequest {
    string registry_id = 1;
}
message DeregisterResponse {}

message ListRequest {
    string namespace = 1;
}
message ListResponse {
    repeated Info applications = 1;
}

message GetRequest {
    string registry_id = 1;
}
message GetResponse {
    Info info = 1;
}

message SearchRequest {
    string namespace = 1;
    Type type = 2;
}
message SearchResponse {
    repeated Info services = 1;
}

service Registry {
    rpc Register(RegisterRequest) returns (RegisterResponse) {
        option(google.api.http) = {
            post: "/api/v1/services/register";
            body: "*";
        };
    };
    rpc Deregister(DeregisterRequest)returns(DeregisterResponse){
            option(google.api.http).get = "/api/v1/services/deregister/{registry_id}";
    };
    rpc List(ListRequest)returns(ListResponse){
            option(google.api.http).get = "/api/v1/services/list";
    };
    rpc Get(GetRequest)returns(GetResponse){
        option(google.api.http).get = "/api/v1/services/get/{registry_id}";
    };
    rpc Search(SearchRequest) returns (SearchResponse) {
        option(google.api.http).get = "/api/v1/services/search";
    };
}